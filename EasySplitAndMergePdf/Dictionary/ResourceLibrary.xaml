<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="clr-namespace:EasySplitAndMergePdf.Behavior"
                    xmlns:c="clr-namespace:EasySplitAndMergePdf.Control">

    <Style TargetType="{x:Type Button}">
        <Setter Property="Width" Value="75"></Setter>
        <Setter Property="Height" Value="23"></Setter>
        <Setter Property="Margin" Value="2"></Setter>
    </Style>

    <Style x:Key="GroupboxHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontSize" Value="13.5" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <LinearGradientBrush x:Key="DefaultHeaderBrush">
        <GradientStop Offset="0" Color="Blue"></GradientStop>
        <GradientStop Offset="1" Color="LightBlue"></GradientStop>
    </LinearGradientBrush>

    <Thickness x:Key="DefaultBorderMargin">5,10,5,5</Thickness>
    <SolidColorBrush x:Key="DefaultBorderBrush" Color="Blue"></SolidColorBrush>
    <SolidColorBrush x:Key="DefaultBackgroundBrush" Color="LightGray"></SolidColorBrush>
    <Thickness x:Key="DefaultBorderThickness">1</Thickness>

    <!-- DataGrid Style members -->
    <SolidColorBrush x:Key="DatagridIsSelectedForeground" Color="White"/>
    <SolidColorBrush x:Key="DatagridIsSelectedBackground" Color="Blue"/>
    <SolidColorBrush x:Key="DatagridIsSelectedBorderBrush" Color="Black"/>
    <SolidColorBrush x:Key="DatagridForeground" Color="Black"/>
    <SolidColorBrush x:Key="DatagridBackground" Color="White"/>
    <SolidColorBrush x:Key="DatagridBorderBrush" Color="White"/>
    <SolidColorBrush x:Key="DatagridAlternatingRowbackground" Color="Lavender"/>
    <SolidColorBrush x:Key="DatagridHorizontalAndVerticalGridLinesBrush" Color="Gray"/>

    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="CanUserSortColumns" Value="False"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <Setter Property="CanUserDeleteRows" Value="False"></Setter>
        <Setter Property="IsReadOnly" Value="True"></Setter>
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
        <Setter Property="SelectionUnit" Value="FullRow"></Setter>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="IsTextSearchEnabled" Value="False" />
        <Setter Property="Background" Value="{StaticResource DatagridBackground}" />
        <Setter Property="Foreground" Value="{StaticResource DatagridForeground}" />
        <Setter Property="BorderBrush" Value="{StaticResource DatagridBorderBrush}" />
        <Setter Property="AlternationCount" Value="1" />
        <Setter Property="AlternatingRowBackground" Value="{StaticResource DatagridAlternatingRowbackground}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource DatagridHorizontalAndVerticalGridLinesBrush}" />
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource DatagridHorizontalAndVerticalGridLinesBrush}" />
        <Setter Property="EnableColumnVirtualization" Value="False" />
        <Setter Property="IsManipulationEnabled" Value="False" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Tahoma" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                    <Setter Property="Padding" Value="4,3,4,3" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{StaticResource DatagridIsSelectedBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource DatagridIsSelectedForeground}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource DatagridIsSelectedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- (NOTE: THIS REQUIRES THE EXPRESSION BLEND 4 System.Windows.Interactivity ASSEMBLY) -->
    <!--You need to add a reference to System.Windows.Interactivity  (Project ==> Add Reference ==> Browse to System.Windows.Interactivity.dll) and click add -->
    <Style x:Key="ErrorTemplateSilverlightStyle" TargetType="{x:Type Control}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate >
                    <StackPanel Orientation="Horizontal">
                        <!-- Defines TextBox outline border and the ToolTipCorner -->
                        <Border x:Name="border" BorderThickness="1.25" BorderBrush="#FFDC000C">
                            <Grid>
                                <Polygon    x:Name="toolTipCorner"
                                            Grid.ZIndex="2"
                                            Margin="-1"
                                            Points="9,9 9,0 0,0"
                                            Fill="#FFDC000C"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Top"
                                            IsHitTestVisible="True"/>
                                <Polyline   Grid.ZIndex="3"
                                            Points="10,10 0,0"
                                            Margin="-1"
                                            HorizontalAlignment="Right"
                                            StrokeThickness="1.5"
                                            StrokeEndLineCap="Round"
                                            StrokeStartLineCap="Round"
                                            Stroke="White"
                                            VerticalAlignment="Top"
                                            IsHitTestVisible="True"/>
                                <AdornedElementPlaceholder x:Name="adorner"/>
                            </Grid>
                        </Border>
                        <!-- Defines the Popup -->
                        <Popup  x:Name="placard"
                                AllowsTransparency="True"
                                PopupAnimation="Fade"
                                Placement="Top"
                                PlacementTarget="{Binding ElementName=toolTipCorner}"
                                PlacementRectangle="10,-1,0,0">
                            <!-- Used to reposition Popup when dialog moves or resizes -->
                            <!-- TODO -->
                            <i:Interaction.Behaviors>
                                <b:RepositionPopupBehavior/>
                            </i:Interaction.Behaviors>
                            <Popup.Style>
                                <Style TargetType="{x:Type Popup}">
                                    <Style.Triggers>
                                        <!-- Shows Popup when TextBox has focus -->
                                        <DataTrigger Binding="{Binding ElementName=adorner, Path=AdornedElement.IsKeyboardFocusWithin}" Value="True">
                                            <Setter Property="IsOpen" Value="True"/>
                                        </DataTrigger>
                                        <!-- Shows Popup when mouse hovers over ToolTipCorner -->
                                        <DataTrigger Binding="{Binding ElementName=toolTipCorner, Path=IsMouseOver}" Value="True">
                                            <Setter Property="IsOpen" Value="True"/>
                                        </DataTrigger>
                                        <!-- Hides Popup when window is no longer active -->
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False">
                                            <Setter Property="IsOpen" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Style>
                            <Border x:Name="errorBorder"
                                    Background="#FFDC000C"
                                    Margin="0,0,8,8"
                                    Opacity="1"
                                    CornerRadius="4"
                                    IsHitTestVisible="False"
                                    MinHeight="24"
                                    MaxWidth="267">
                                <Border.Effect>
                                    <DropShadowEffect ShadowDepth="4"
                                                      Color="Black"
                                                      Opacity="0.6"
                                                      Direction="315"
                                                      BlurRadius="4"/>
                                </Border.Effect>
                                <ItemsControl ItemsSource="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock  Foreground="White"
                                                        Margin="8,3,8,3"
                                                        TextWrapping="Wrap"
                                                        Text="{Binding ErrorContent.ErrorContent}"/>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </Border>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource ErrorTemplateSilverlightStyle}"></Style>
    <Style TargetType="{x:Type c:IntegerTextBox}" BasedOn="{StaticResource ErrorTemplateSilverlightStyle}"></Style>

</ResourceDictionary>